Basic way for creating Thread in  Java .

1) By extending Thread class
2) Implement Runnable interface

2nd approach is best because , it gives us space to extends the class which is implements Runnable interface.

*--> When and how we create Lambda Expression:?

Another way to create Thread by using Lambda expression as Runnabale interface is one type of Functional interface.
For creating lambda expression interface should be functional interface. :-

What is functional interface?
The interface which contains single abstract method.

2. Thread scheduler(TS) and Thread Lifecycle(TL):

TS: It is responsible for order of thread executes in OS. OS uses below schedular alogorithm to schedule threads internally:
 A) First COme first serve (FCFS)
 B) Shortest Job Next(SJN)
 C) Priority
 D) Shortest Remaining Time(SRT)
 E) Round Robbin(RR)
 F) Multiple-Level Queues Scheduling

* why we call Start method , why cant Run method directly?
Ans-> by calling Start method , before running the thread we are scheduing the thread. If we call run method , then it will be normal method call

### Thread Life Cycle: ->

Different Thread state:
 A)Start/Born
 B)Ready To Run
 C)Running
 D)Waiting
 E)Sleeping
 F)Blocked
 G)Dead

Core methods of thread class(): ->
Thread are total 9 constructor.

Thread priority range from 1-10, 1 is minimum proority 10 is mximum priority 5 is normal priority which is default priority.
If we set priority out of the range then we will get IlllegalArgument Exception

Thread coordination methods:

A)yield():-> When we call yield method on thred then it will switch from running to runnable state and thread scheduler allocate processor to thread having with same priority.

Thread switches from running to runnable state.
B)join():-> Thread status switches from running to waiting state. We can acheive deadlock by using join.
C)sleep()
D)interrupt() --> When a thread is sleeping or in waiting state we can or some other thread can interrupt that thread by calling interrupt() method on the thread.

    public void interrupt()
    public static boolean interrupted() // It set the flag to false if it is true.
    public boolean isinterrupted()

Interrupt and joins creates deadlock situations.


#################################################################################################################

********************* Concurrency Challengaes and Race conditions ****************************

Topics:
A) JVM Memory area for variables
B) Race conditions
C) Data Race
D) Atomicity
E) Atomic and Non-Atomic Variable
F) Challenges with Multithreading

When JVM start-up Heap memory created, it is shared by multiple thread.
One memory area- : For every thread JVM create Run time Stack memory

Heap Area:
    1) Instance variable that are declare inside class but outside methods.
    2) Static variabkes
    3) Objects
    4) Arrays : because it is  objects

Statck Area:

    All the parameter and the local varibake of the method are stored in to statck area.


Atomic and Non Atomic Operation:

Read and write are atomic operation provided 32 bit.

except long and Double because use 64 bit


Data Race: When 2 or more thread access same morey location at same time.W call all this process as data race.

Implicit lock achieve by Synchronization.
Explicit lock by using Concurrent API.

########### Synch also called (Lock or Monitor) and Locking technique #############

Critical Section : Share resource  between multiple thread at a time.

By synchronization we can acheive Implicit lock.

Drawback is only thread can access at a time and others are on waiting state. Lock based on the object

Every Object has two area Synchronized and non synchronized. If multiple thread is running on different object then Synchronization is not required.

Update should be in synchronization block.
Read operation synchronizations is not required.

Class Level Lock:
 If we apply synchronization on Static variable or static method then it will be class level Lock.
 If we apply synchronization on static method then we can call non static method and static instance synchronization .

Synchronization Block:

Add critical section block inside Synchronizes block.

When we are define sysnchronization on object level then use synchronized(this) but when we are using class level lock then use synchronized(Class.className)
Hint : If method or class member  is static then use synchronized(Class.ClassName)

We can also apply lock on object while passing object inside synchronized



##################### Wait Notify Nad NotifyAll #######################################
For inter-thread communication :

We can wait() to force the current thread to wait unitl some other thread invokes notify() or notifyall() on the same object.

public final void()
public final native wait(long)
public final void wait(ms,ns)

The notify() and notifyall() methods are used for waking up threads that are waiting.Both are native native

Note: Wait() , Notify() and Notifyall() all three methods object level method  belongs to Object class, Not belongs to the Thread class.

#################   Interface Lock  ################################################################

Lock interface : We can achieve Explicit lock using this interface.

There are two class which implements this Lock interface.:

Core methods in interface:-
1. Void Lock()
2. boolean tryLock()
3. boolean tryLock(longTime,TimeUnit unit)
4. void lockinterrupt


A) ReentrantLock
B) ReentrantReadWriteLock

**********   ReentrantLock ####################
This is direct child class of Object class and Implementation class of Lock interface.
Faireless policy: By deflaut it is false. When we set it as true then the thred which is waiting for long time will acquire the lock.

FairSync();
NonFairSync();

Pernonal count: In Reentrant lock one thred can acquire lock multiple time. Internally it increase Personal count when it lock and decrement Personal count when it unlock.

For class level clock we should use static RentrantLock.

############## Why immutable class are thread safe? #######################

***** Thread Safety ********
1) can safely be use or shared in concurrent or multithreading environment.
     And we can achieve by using
        * Synchronized Block or Synchronized method
        * Using Atomic variable
        * Using Lock

 But Immutable claees are automatically thread safe because , their state cannt be modified once created, if we ll try to do so it will create new object.

 Thread safety simply means that two or more threads must work in cordination on shared resource or object. One should not over-ride the changes done by the other thread.

 String is immutable class.

 All wrapper class are  immutable.

 Properties of immutability:-

A) State of immutable object cann't be modified after construction, any modifications should result in new immutable object.
B) All fields of immutable class should be final.
C) Object must be properly constructed i.e. object reference must not leak during construction process.
D) Class should be final in order to restrict sub-class for altering immutability of parent class.


##################  Liveness Problem   ##################################################################

A) DeadLock : Most liveness problem . and it arises bease of not proper use of synchronization.
    When two or more threads are waiting for each other to release the resource or lock and get stuck for infinite time, the situation is called Deadlock.
    For example :

    Suppose there are two thread T1 and T2 , T1 is holding Obj1 and T2 holding Obj2 and T1 wants to access Obje2 and T2 wants to access Obj1.So here two threads are waiting each other to relaese resorce.

B) Starvation: Starvation describes a situation where a  thread is unable to gain regular access to shared resource and is unable to make progress.

C) LiveLock

Technique to prevent these: -

 What is liveness?

 A concurrent application ability to execute in a timeliy manner is known as its liveness.

 [Watch Dog program.]


######################## Daemon Thread ################

Are those thread which run in backgrounds. DT craetd by JVM.

Major Diff: JVM wait for user thread but It does not wiat for DT. DT leaset prior than User thread.

User thread and Daemon Thread: ->


############################## Advance Multithreading #########################

1) Thread pool and executor framework
2) Thread Group
3) Thread Local
4) Callable and Future.


#### Thread group: -> Thread group represents group of threads, that are responsible for doing similar.

Advantage of thred group is that we can perform common operation on whole group.

We can have subgroup under thread group.

System is parent of all thread froup which is running into JVM.

### Executor framework Thread Pool -->######

Pool is collection of Object and when done object return to the pool.It is important because pooling make object sharebale memory and cpu both.

submit return FutureTask object.

ExecutorService internally using Pooling Algorithm.

############### Callable and Future ################

There is another way to create Thread.

public Object call() throws Exception.

Asynchronous can achieve.

####### ThreadLocal ######
We only have to use with non immutable class and on thread safe .


#################### Concurrent Collections ###################################

1) Problem with old Java collections
2) ConcurrentModificationExceptions
3) How concurrent collection solve the problem
4) ConcurrentHashMap
5) copyOnWriteArrayList
6) copyOnWritearraySet
7) CountDownLatch
8) Cyclic Barrier
9) Blocking Queue
10) Exchengers
11) Semaphores

Problem occurs when multiple thread tries to access same Object.

Legacy class like Vector, Stack and HashTable are synchronized.

List and linkedlist are not synchronised.

Collections utility like

Collections.synchronizedList(List)
Collections.synchronizedMap(map)
Collections.synchronizedSet(set)

****** Concurrent Modification Exception **************

When iterator is iterating the collection by one thread and at the same time if another thread tries to modify the same collection , there is a possibility that program can throw ConcurrentModification Exception.

Data Inconsistancy:

java.util.concurrent
In mordern

concurrentHashMap: --> Map interface extended by concurrent map interface and concurrent interface is implemented by concurrenthashamp class.

Internal working of ConcurrentHashMap:-->
On read no lock and lock on segment of block. As we know hash map is devided into 16 block. Therefore 16 thread can work simultaniously.

Concurency Level can be change while creating concurrentHashMap.

Fail fast and fail safe. --> concurrent hashmap is fail safe.


CopyOnWriteArrayList-->  it implements list interface and list imlemets collection interface.

For read there is no lock, but for write it clone a copy and and do the update on copy of the

CopyOnWriteArraySet--> Concurrent version of set. internally inpmelement arraylist. Holds unique objects.

************ Count down latch **********************

CountDownLatch is a kind of synchroniser which allows one Thread to wait for one or more Threads before starts processing
It helps in inter thread communication and can improve the multithreading programs.

The same we can acheive using wait and notify but it require lot of code to write, but in CountDownLatch can be done in just few lines.

We can not re-use the countdownlatch , this is rectufied in cyclic barrier.


********* Blocking Queue **********

It is unique collection type which not only store elements but also supports flow control by introducing
blocking if BlockingQueue is full or empty

take() --> this method block the queue if queue is empty
put() ---> Block the queue if queue is full.

Basically it prevent the leackage.

BlockingQueue is interface in java
ArrayBlockingQueue
LinkBlockingQueue
PrioritylockingQueue

These are the implementations of the Blocking queue.

All works on FIFO order.
